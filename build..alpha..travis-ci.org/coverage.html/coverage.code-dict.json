{"/home/travis/build/npmtest/node-npmtest-gist-cli/test.js":"/* istanbul instrument in package npmtest_gist_cli */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gist-cli/lib.npmtest_gist_cli.js":"/* istanbul instrument in package npmtest_gist_cli */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gist_cli = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gist_cli = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gist-cli/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gist-cli && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gist_cli */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gist_cli\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gist_cli.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_gist_cli.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gist_cli.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_gist_cli.__dirname + '/lib.npmtest_gist_cli.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gist-cli/node_modules/gist-cli/gist.js":"#!/usr/bin/env node\nvar args = process.argv.slice(2)\nvar path = require('path')\nvar fs = require('fs')\nvar private = false\nvar description = ''\nvar opener = require('opener')\nvar copy = process.platform === 'darwin'\nvar open = true\nvar stdin = true\nvar anon = false\nvar type = 'txt'\nvar files = []\nvar doMain = true\nvar ini = require('ini')\nvar child_process = require('child_process')\nvar execFile = child_process.execFile\nvar spawn = child_process.spawn\nvar home = require('osenv').home()\nvar authFile = home + '/.gist-login'\nvar https = require('https')\nvar read = require('read')\nvar userAgent = 'node/gist-cli@' + require('./package.json').version\nvar argUN = null\nvar argPW = null\nvar edit = false\nvar prune = false\nvar url = require('url')\n\nvar debug\nif (process.env.NODE_DEBUG && /\\bgist\\b/.exec(process.env.NODE_DEBUG)) {\n  var util = require('util')\n  debug = function() {\n    var m = util.format.apply(util, arguments)\n    console.error('GIST', m)\n  }\n} else {\n  debug = function() {}\n}\n\nfor (var a = 0; a < args.length; a++) {\n  switch (args[a]) {\n    case '-e': case '--edit':\n      edit = args[++a]\n      var p = url.parse(edit || '')\n      if (p && p.host)\n        edit = p.pathname\n      edit = path.basename(edit)\n      break\n    case '--prune':\n      prune = true\n      break\n    case '-u': case '--user': case '--username':\n      argUN = args[++a]\n      break\n    case '-P': case '--pass': case '--password':\n      argPW = args[++a]\n      break\n    case '-c': case '--copy':\n      copy = process.platform === 'darwin'\n      break\n    case '--no-copy':\n      copy = false\n      break\n    case '-p': case '--private':\n      private = true\n      break\n    case '--no-private':\n      private = false\n      break\n    case '-t': case '--type':\n      type = args[++a]\n      break\n    case '-d': case '--description':\n      description = args[++a]\n      break\n    case '-o': case '--open':\n      open = true\n      break\n    case '--no-open':\n      open = false\n      break\n    case '-v': case '--version':\n      version()\n      doMain = false\n      break\n    case '-h': case '--help':\n      help()\n      doMain = false\n      break\n    case '-a': case '--anon': case '--anonymous':\n      anon = true\n      break\n    default:\n      files.push(args[a])\n      break\n  }\n}\n\nif (files.length !== 0 && files.indexOf('-') === -1)\n  stdin = false\n\nif (doMain) main()\n\n\nfunction help() {\n  console.log([\n    'Usage: gist [options] [filename, ...]',\n    'Filename \\'-\\' forces gist to read from stdin.',\n    'gist will read from stdin by default if no files specified',\n    '    -p, --[no-]private               Make the gist private',\n    '    -t, --type [EXTENSION]           Set syntax highlighting of the Gist by file extension',\n    '                                     (Only applies to stdin data, filenames use extension)',\n    '    -d, --description DESCRIPTION    Set description of the new gist',\n    '    -o, --[no-]open                  Open gist in browser',\n    '    -c, --[no-]copy                  Save url to clipboard (osx only)',\n    '    -v, --version                    Print version',\n    '    -h, --help                       Display this screen'\n  ].join('\\n'))\n}\n\nfunction version() {\n  console.log(require('./package.json').version)\n}\n\nfunction main() {\n  debug('main start')\n  if (anon && private) {\n    console.error('Cannot create private anonymous gists')\n    process.exit(1)\n  }\n\n  if (prune && !edit) {\n    console.error('--prune requires a --edit argument')\n    process.exit(1)\n  }\n\n  if (anon)\n    getData(files, onData.bind(null, null))\n  else\n    getAuth(function(er, auth) {\n      debug('auth', er, auth)\n      if (er)\n        throw er\n      getData(files, onData.bind(null, auth))\n    })\n}\n\nfunction onData(auth, er, data) {\n  if (er)\n    throw er\n\n  var body = {\n    description: description,\n    public: !private && !anon,\n    files: data.files\n  }\n\n  if (data.edit) {\n    body.description = description || data.edit.description\n    body.public = data.edit.public\n    if (prune) {\n      for (var f in data.edit.files) {\n        if (!body.files[f])\n          body.files[f] = null\n      }\n    }\n  }\n\n  body = new Buffer(JSON.stringify(body))\n\n  debug('body', body.toString())\n\n  var opt = {\n    method: edit ? 'PATCH' : 'POST',\n    host: 'api.github.com',\n    port: 443,\n    path: '/gists' + (edit ? '/' + edit : ''),\n    headers: {\n      host: 'api.github.com',\n      'user-agent': userAgent,\n      'content-length': body.length,\n      'content-type': 'application/json'\n    }\n  }\n\n  if (!anon)\n    opt.headers.authorization = 'token ' + auth.token\n\n  debug('making request', opt)\n  var req = https.request(opt)\n  req.on('response', function (res) {\n    var result = ''\n    res.setEncoding('utf8')\n    res.on('data', function(c) {\n      result += c\n    })\n    res.on('end', function() {\n      result = JSON.parse(result)\n      debug('result', result)\n      var id = result.id\n      var user = auth && auth.user || 'anonymous'\n      var url = 'https://gist.github.com/' + user + '/' + id\n      if (open)\n        opener(url)\n      if (copy)\n        copyUrl(url)\n      process.on('exit', function() {\n        console.log(url)\n      })\n    })\n\n    if (auth) {\n      saveAuth(auth, function (er, result) {\n        if (er)\n          throw er\n      })\n    }\n  })\n  req.end(body)\n}\n\nfunction copyUrl(url) {\n  spawn('pbcopy', []).stdin.end(url)\n}\n\nfunction getAuth(cb) {\n  var user = argUN\n  var pass = argPW\n  var argAuth = { user: argUN, pass: argPW }\n  if (user && pass) {\n    debug('auth on argv')\n    return tokenize({ user: argUN, pass: argPW }, cb)\n  }\n\n  if (user && !pass) {\n    debug('user on argv, password required')\n    return getPassFromCli(argAuth, function (er, auth) {\n      debug('getPassFromCli', er, auth)\n      done(er, auth)\n    })\n  }\n\n  getAuthFromFile(authFile, function(er, auth) {\n    debug('getAuthFromFile', er, auth)\n    if (er)\n      getAuthFromGit(function (er, auth) {\n        debug('getAuthFromGit', er, auth)\n        if (er)\n          getAuthFromCli(function (er, auth) {\n            debug('getAuthFromCli', er, auth)\n            done(er, auth)\n          })\n        else\n          done(er, auth)\n      })\n    else\n      done(er, auth)\n  })\n\n  function done(er, auth) {\n    if (er)\n      return cb(er)\n    auth.user = auth.user.trim()\n    auth.token = auth.token.trim()\n    if (argAuth.user && auth.user !== argAuth.user) {\n      auth.user = argAuth.user\n      delete auth.token\n      auth.pass = argAuth.pass\n    }\n    cb(er, auth)\n  }\n}\n\nfunction getAuthFromCli(cb) {\n  // can't read a file from stdin if we're reading login!\n  if (files.indexOf('-') !== -1 || stdin) {\n    debug('error: gisting stdin and also reading auth on stdin')\n    process.exit(1)\n  }\n\n  var data = {}\n  read({ prompt: 'github.com username: ' }, function(er, user) {\n    if (er)\n      return cb(er)\n    data.user = user.trim()\n    getPassFromCli(data, cb)\n  })\n}\n\nfunction getPassFromCli(data, cb) {\n  if (files.indexOf('-') !== -1 || stdin) {\n    debug('error: gisting stdin and also reading auth on stdin')\n    process.exit(1)\n  }\n\n  read({ prompt: 'github.com password: ', silent: true }, function(er, password) {\n    if (er)\n      return cb(er)\n    password = password.trim()\n    data.pass = password\n    tokenize(data, cb)\n  })\n}\n\nfunction tokenize (data, cb) {\n  // curl -u isaacs \\\n  //   -d '{\"scopes\":[\"gist\"],\"note\":\"gist cli access\"}' \\\n  //   https://api.github.com/authorizations\n  var body = new Buffer(JSON.stringify({\n    scopes: [ 'gist' ],\n    note: 'gist cli access'\n  }))\n  var r = {\n    method: 'POST',\n    host: 'api.github.com',\n    headers: {\n      'content-type': 'application/json',\n      'content-length': body.length,\n      'user-agent': userAgent,\n      authorization: 'Basic ' +\n        new Buffer(data.user + ':' + data.pass).toString('base64')\n    },\n    path: '/authorizations'\n  }\n\n  if (data.otp)\n    r.headers['X-GitHub-OTP'] = data.otp\n\n  var req = https.request(r)\n  var result = ''\n  req.on('response', function(res) {\n    res.on('error', cb)\n    res.setEncoding('utf8')\n    res.on('data', function(c) {\n      result += c\n    })\n    res.on('end', function() {\n      result = JSON.parse(result)\n      if (res.statusCode >= 400) {\n        debug('failed', res.statusCode, result)\n        var otp = res.headers['x-github-otp']\n        if (res.statusCode === 401 &&\n            !data.otp && otp && otp.match(/^required; /)) {\n          var type = otp.replace(/^required; /, '')\n          return getOTP(data, type, cb)\n        }\n        var message = result.message || JSON.stringify(result)\n        return cb(new Error(message))\n      }\n      debug('ok', res.statusCode, result)\n      data.token = result.token\n      // just to make sure we don't waste this...\n      if (files.length === 0)\n        saveAuth(data, function(er) {\n          cb(er, data)\n        })\n      else\n        cb(null, data)\n    })\n  })\n  req.on('error', cb)\n  req.write(body)\n  req.end()\n}\n\nfunction getOTP(data, type, cb) {\n  if (files.indexOf('-') !== -1 || stdin) {\n    debug('error: gisting stdin and also reading auth on stdin')\n    process.exit(1)\n  }\n\n  read({\n    prompt: 'two factor auth (' + type + '): ',\n    silent: true\n  }, function(er, otp) {\n    if (er)\n      return cb(er)\n    data.otp = otp.trim()\n    tokenize(data, cb)\n  })\n}\n\nfunction getAuthFromFile(authFile, cb) {\n  // try to load from our file\n  fs.readFile(authFile, 'utf8', function(er, data) {\n    if (er)\n      return cb(er)\n    data = ini.parse(data)\n    if (!data.gist || !data.gist.user || !data.gist.token)\n      return cb(new Error('no login data in '+authFile))\n    return cb(null, data.gist)\n  })\n}\n\nfunction getAuthFromGit(cb) {\n  var data = {}\n  getConfFromGit('gist.user', function(er, user) {\n    if (er)\n      return cb(er)\n    data.user = user\n    getConfFromGit('gist.token', function(er, token) {\n      if (er)\n        return cb(er)\n      data.token = token\n      cb(null, data)\n    })\n  })\n}\n\nfunction getConfFromGit(key, cb) {\n  debug('getConfFromGit', 'git', ['config', '--get', key].join(' '))\n  var env = { env: process.env }\n  execFile('git', ['config', '--get', key], env, function (er, stdout, stderr) {\n    debug('back from git config', er, stdout, stderr)\n    if (er || !stdout)\n      debug(stderr)\n    return cb(er, stdout)\n  })\n}\n\nfunction saveAuth(data, cb) {\n  var d = { gist: {\n    user: data.user,\n    token: data.token\n  }}\n  fs.writeFile(authFile, ini.stringify(d), cb)\n}\n\nfunction getData(files, cb) {\n  var data = { files: {} }\n  if (stdin && files.indexOf('-') === -1)\n    files.push('-')\n\n  var c = files.length\n  if (edit) {\n    c++\n    getEditData(function(er, editData) {\n      data.edit = editData\n      next(er)\n    })\n  }\n\n  var errState = null\n  var didStdin = false\n  files.forEach(function (f) {\n    if (f === '-') {\n      if (!didStdin) {\n        didStdin = true\n        var stdinData = ''\n        process.stdin.setEncoding('utf8')\n        process.stdin.on('data', function(chunk) {\n          stdinData += chunk\n        })\n        process.stdin.on('error', function(er) {\n          next(er)\n        })\n        process.stdin.on('end', function() {\n          data.files['gistfile.' + type] = { content: stdinData }\n          next()\n        })\n      }\n    } else {\n      fs.readFile(f, 'utf8', function(er, fileData) {\n        if (er)\n          next(er)\n        else {\n          data.files[f.replace(/\\\\|\\//g, '-')] = { content: fileData }\n          next()\n        }\n      })\n    }\n  })\n\n  function next(er) {\n    if (errState)\n      return\n    else if (er)\n      return cb(errState = er)\n    else if (--c === 0) {\n      cb(null, data)\n    }\n  }\n}\n\nfunction getEditData(cb) {\n  debug('getEditData %s', 'https://api.github.com/gists/' + edit)\n  var r = url.parse('https://api.github.com/gists/' + edit)\n  r.headers = {\n    'user-agent': userAgent,\n  }\n  https.get(r, function(res) {\n    debug('getEditData', res.statusCode, res.headers)\n    var j = ''\n    res.setEncoding('utf8')\n    res.on('data', function(c) {\n      j += c\n    })\n    res.on('end', function() {\n      debug(j)\n      j = JSON.parse(j)\n\n      if (res.statusCode !== 200)\n        cb(new Error('Invalid gist ID: ' + edit))\n      else\n        cb(null, j)\n    })\n  }).on('error', cb)\n}\n"}